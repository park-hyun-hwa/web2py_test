(dp1
S'output'
p2
S"<type 'exceptions.NotImplementedError'> gevent is only usable from a single thread"
p3
sS'layer'
p4
S'/home/pi/hyunhwa/web2py/applications/test/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport chats\nfrom sht_db import sht_db_main,reading,calc\nimport datetime\nfrom co2 import syncfind,checkAlignment,init_process\n\ndef index():\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello Hyun Hwa Test Page\'))\n\n\ndef user():\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n\ndef call():\n    return service()\n\n\n\ndef check_form():\n    #update = db.register(request.args(0))\n    form = SQLFORM(db.client)\n    if form.accepts(request,session):\n        response.flash = \'Thanks! The form has been submitted.\'\n    elif form.errors:\n       response.flash = \'Please correct the error(s).\'\n    else:\n       response.flash = \'Try again - no fields can be empty.\'\n    return dict(form=form)\n\ndef all_records():\n    grid = SQLFORM.grid(db.auth_user,user_signature=False)\n    return locals()\n\ndef sht_db():\n    #db.sht20.insert(data_time=datetime.datetime.now(),temperature=sht_db_main(1),humidity=sht_db_main(2),co2=0)\n    #time.sleep(10)\n    #grid = SQLFORM.grid(db.sht20,user_signature=False)\n    \n    #db.chat.insert(data_time=datetime.datetime.now(),temperature=sht_db_main(1),humidity=sht_db_main(2),co2=0)\n    #chats._create_message(db,\'temperature\',sht_db_main(1))\n    #chats._create_message(db,\'humidity\',sht_db_main(2))\n    grid = SQLFORM.grid(db.chat,user_signature=False)\n    return locals()\n\n@auth.requires_login()\ndef chatting():\n    return chats.index(db)\n\n@auth.requires_signature()\ndef message_new():\n    return chats.message_new(db)\n\n@auth.requires_signature()\ndef message_updates():\n    # need to unlock the session when using\n    # session file, should not be need it when\n    # using session in db, or in a cookie\n    session._unlock(response)\n    return chats.message_updates(db)\n\n#@auth.requires_signature()\ndef sensor_updates():\n    #hats._create_message(db, \'temperature\', "\xed\x98\x84\xec\x9e\xac \xec\x98\xa8\xeb\x8f\x84\xeb\x8a\x94 "+str(sht_db_main(1))+" \xe2\x84\x83 \xec\x9e\x85\xeb\x8b\x88\xeb\x8b\xa4.")\n    #chats._create_message(db, \'humidity\', "\xed\x98\x84\xec\x9e\xac \xec\x8a\xb5\xeb\x8f\x84\xeb\x8a\x94 "+str(sht_db_main(2))+" \xef\xbc\x85 \xec\x9e\x85\xeb\x8b\x88\xeb\x8b\xa4.")\n    if sht_db_main(1)>28:\n        chats._create_message(db, \'temperature\', "\xed\x98\x84\xec\x9e\xac \xec\x98\xa8\xeb\x8f\x84\xeb\x8a\x94 "+str(sht_db_main(1))+" \xe2\x84\x83 \xec\x9e\x85\xeb\x8b\x88\xeb\x8b\xa4.\\n\xec\x98\xa8\xeb\x8f\x84\xea\xb0\x80 \xeb\x84\x88\xeb\xac\xb4 \xeb\x86\x92\xec\x8a\xb5\xeb\x8b\x88\xeb\x8b\xa4.\\n\xeb\xaa\x85\xeb\xa0\xb9 : alert by LED")\n    elif sht_db_main(2)>70:\n        chats._create_message(db, \'humidity\', "\xed\x98\x84\xec\x9e\xac \xec\x8a\xb5\xeb\x8f\x84\xeb\x8a\x94 "+str(sht_db_main(2))+" \xef\xbc\x85 \xec\x9e\x85\xeb\x8b\x88\xeb\x8b\xa4.\\n\xec\x8a\xb5\xeb\x8f\x84\xea\xb0\x80 \xeb\x84\x88\xeb\xac\xb4 \xeb\x86\x92\xec\x8a\xb5\xeb\x8b\x88\xeb\x8b\xa4. \\n\xeb\xaa\x85\xeb\xa0\xb9 : alert by LED")\n    return chats.index(db)\n\n\ndef co2_calc():\n    ppm = 0 \n    try:\n        in_byte = serial_in_device.read(SERIAL_READ_BYTE) \n        pos = 0\n    except serial.SerialException, e:\n        ledall_off()\n    if not (len(in_byte) is SERIAL_READ_BYTE) : \n        logger.error("Serial packet size is strange, %d, expected size is %d" % (len(in_byte),SERIAL_READ_BYTE))\n        print \'serial byte read count error\'\n        return -1\n    # sometimes, 12 byte alighn is in-correct\n    # espacially run on /etc/rc.local\n    if not in_byte[9] is \'m\':\n        shift_byte = checkAlignment(in_byte)\n        in_byte = shift_byte\n    if (\'ppm\' in in_byte):\n            if not(in_byte[2] is \' \') :\n                ppm += (int(in_byte[2])) * 1000\n            if not (in_byte[3] is \' \') :\n                ppm += (int(in_byte[3])) * 100\n            if not (in_byte[4] is \' \') :\n                ppm += (int(in_byte[4])) * 10\n            if not (in_byte[5] is \' \') :\n                ppm += (int(in_byte[5]))  \n\n            logline = sensorname + \' CO2 Level is \'+ str(ppm) + \' ppm\' \n            ledall_off()\n\t    \n            lcd_string(\'CO2 : %d \' %ppm,LCD_LINE_1,1)\n\t    lcd_string(\'\',LCD_LINE_2,1)\n\n            if DEBUG_PRINT :\n                print logline\n\n            if ppm > 2100 : \n                logger.error("%s", logline)\n                # cancel insert data into DB, skip.... since PPM is too high,\n                # it\'s abnormal in indoor buidling\n                ledred_on()\n                ### maybe change to BLINK RED, later\n                return -1\n            else :\n                logger.info("%s", logline)\n    return ppm\n\nresponse._vars=response._caller(message_updates)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/pi/hyunhwa/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/pi/hyunhwa/web2py/applications/test/controllers/default.py", line 134, in <module>\n  File "/home/pi/hyunhwa/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/pi/hyunhwa/web2py/gluon/tools.py", line 3769, in f\n    return action(*a, **b)\n  File "/home/pi/hyunhwa/web2py/applications/test/controllers/default.py", line 75, in message_updates\n    return chats.message_updates(db)\n  File "applications/test/modules/chats.py", line 74, in message_updates\n    new_message_event.wait()\n  File "/usr/lib/pymodules/python2.7/gevent/event.py", line 74, in wait\n    result = get_hub().switch()\n  File "/usr/lib/pymodules/python2.7/gevent/hub.py", line 135, in get_hub\n    raise NotImplementedError(\'gevent is only usable from a single thread\')\nNotImplementedError: gevent is only usable from a single thread\n'
p11
s.