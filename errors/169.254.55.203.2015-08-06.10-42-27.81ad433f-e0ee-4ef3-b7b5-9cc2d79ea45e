(dp1
S'output'
p2
S'<type \'exceptions.SyntaxError\'> invalid table/column name "time" is a "ALL" reserved SQL/NOSQL keyword'
p3
sS'layer'
p4
S'/home/pi/hyunhwa/web2py/applications/test/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport chats\nfrom sht_db import sht_db_main,reading,calc\nimport datetime\n\ndef index():\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello Hyun Hwa Test Page\'))\n\n\ndef user():\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n\ndef call():\n    return service()\n\n\n\ndef check_form():\n    #update = db.register(request.args(0))\n    form = SQLFORM(db.client)\n    if form.accepts(request,session):\n        response.flash = \'Thanks! The form has been submitted.\'\n    elif form.errors:\n       response.flash = \'Please correct the error(s).\'\n    else:\n       response.flash = \'Try again - no fields can be empty.\'\n    return dict(form=form)\n\ndef all_records():\n    grid = SQLFORM.grid(db.client,user_signature=False)\n    return locals()\n\ndef sht_db():\n    db.sht20_data.insert(time=datetime.datetime.now(),temperature=sht_db_main(1),\n                    humidity=sht_db_main(2),co2=0)\n    #time.sleep(10)\n    grid = SQLFORM.grid(db.sht20_data,user_signature=False)\n    return locals()\n\n@auth.requires_login()\ndef chatting():\n    return chats.index(db)\n\n@auth.requires_signature()\ndef message_new():\n    return chats.message_new(db)\n\n@auth.requires_signature()\ndef message_updates():\n    # need to unlock the session when using\n    # session file, should not be need it when\n    # using session in db, or in a cookie\n    session._unlock(response)\n    return chats.message_updates(db)\n\nresponse._vars=response._caller(sht_db)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/pi/hyunhwa/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/pi/hyunhwa/web2py/applications/test/controllers/default.py", line 72, in <module>\n  File "/home/pi/hyunhwa/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/pi/hyunhwa/web2py/applications/test/controllers/default.py", line 50, in sht_db\n    db.sht20_data.insert(time=datetime.datetime.now(),temperature=sht_db_main(1),\n  File "/home/pi/hyunhwa/web2py/gluon/packages/dal/pydal/base.py", line 906, in __getattr__\n    return self.lazy_define_table(tablename,*fields,**args)\n  File "/home/pi/hyunhwa/web2py/gluon/packages/dal/pydal/base.py", line 834, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/pi/hyunhwa/web2py/gluon/packages/dal/pydal/objects.py", line 350, in __init__\n    check_reserved(field_name)\n  File "/home/pi/hyunhwa/web2py/gluon/packages/dal/pydal/base.py", line 519, in check_reserved_keyword\n    \'invalid table/column name "%s" is a "%s" reserved SQL/NOSQL keyword\' % (name, backend.upper()))\nSyntaxError: invalid table/column name "time" is a "ALL" reserved SQL/NOSQL keyword\n'
p11
s.